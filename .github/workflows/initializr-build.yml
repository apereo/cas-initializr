name: Initializr

env:
  JAVA_OPTS: "-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC"
  GRADLE_OPTS: "-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC"
  TERM: xterm-256color
  JDK_CURRENT: 11.0.10
  HELM_CURRENT: v3.5.3
  HELM_CAS_VERSION: 6.4.0-SNAPSHOT
  HELM_BOOT_VERSION: 2.5.1
  CAS_MGMT_VERSION: 6.3.3-SNAPSHOT
  CAS_MGMT_SPRING_BOOT_VERSION: 2.3.7.RELEASE
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PWD: ${{ secrets.DOCKER_PWD }}

##########################################################################

on:
  push:
    branches: [ master  ]
  pull_request:
    branches: [ master  ]

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Build Initializr
        run: ./gradlew --build-cache --configure-on-demand --no-daemon clean build -x test -x javadoc -x check --parallel
      - uses: actions/upload-artifact@v2
        with:
          name: binary-artifacts
          path: ./**/build/libs/*.*
  ##########################################################################
  supported-versions:
    needs: [build]
    runs-on: ubuntu-latest
    outputs:
      supported-versions: ${{ steps.get-supported-versions.outputs.supported-versions }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      - id: run-initializr
        name: Run Initializer to get supported versions
        run: |
          . ./ci/functions.sh
          java -jar app/build/libs/app.jar &
          waitForInitializr
      - id: print-supported-versions
        name: Print supported versions
        run: curl -q http://localhost:8081/actuator/supportedVersions | jq .
      - id: get-supported-versions
        name: Get supported versions for matrix
        run: echo "::set-output name=supported-versions::$(curl -q http://localhost:8081/actuator/supportedVersions)]}"
      - id: stop-initializr
        name: Stop Initializr
        run: |
          . ./ci/functions.sh
          stopInitializr
  ##########################################################################
  validate-cas-overlay:
    needs: [supported-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions.outputs.supported-versions)}}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      - name: Validate Overlay
        run: ./ci/validate-cas-overlay.sh ${{ matrix.versions.casVersion }} ${{ matrix.versions.bootVersion }}
  validate-cas-mgmt-overlay:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      - name: Validate Overlay
        run: ./ci/validate-cas-mgmt-overlay.sh ${{ env.CAS_MGMT_VERSION }} ${{ env.CAS_MGMT_SPRING_BOOT_VERSION }}
  validate-cas-configserver-overlay:
    needs: [supported-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions.outputs.supported-versions)}}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      - name: Validate Overlay
        run: ./ci/validate-cas-configserver-overlay.sh ${{ matrix.versions.casVersion }} ${{ matrix.versions.bootVersion }}
  validate-cas-discoveryserver-overlay:
    needs: [supported-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions.outputs.supported-versions)}}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      - name: Validate Overlay
        run: ./ci/validate-cas-discoveryserver-overlay.sh ${{ matrix.versions.casVersion }} ${{ matrix.versions.bootVersion }}
  validate-cas-bootadminserver-overlay:
    needs: [supported-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions.outputs.supported-versions)}}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      - name: Validate Overlay
        run: ./ci/validate-cas-bootadminserver-overlay.sh ${{ matrix.versions.casVersion }} ${{ matrix.versions.bootVersion }}
  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      - name: Build Docker Image
        run: ./gradlew bootBuildImage
      - name: Publish Docker Image
        if: ${{ github.event_name == 'push' && env.DOCKER_USER != null && env.DOCKER_PWD != null }}
        run: |
          echo "${DOCKER_PWD}" | docker login --username "$DOCKER_USER" --password-stdin
          imageTag=(`./gradlew casVersion --q`)
          echo "Pushing Docker image with tag $imageTag"
          docker push apereo/cas-initializr:"$imageTag"
  helm:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k3s-version: [v1.20.2, v1.19.7, v1.18.15, v1.17.17] # v1.16.15
    env:
      GOPATH: /home/runner/go
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      - name: Install K3S
        env:
          INSTALL_K3S_VERSION: ${{ matrix.k3s-version }}+k3s1
          INSTALL_K3S_EXEC: "--disable=traefik" # using ingress-nginx
        run: |
          set -x
          curl -sfL https://get.k3s.io | sh -
          sudo chmod -R a+rw /etc/rancher/k3s
          sudo mkdir -p $HOME/.kube && sudo chown -R runner $HOME/.kube
          sudo k3s kubectl config view --raw > $HOME/.kube/config
          sudo chown runner $HOME/.kube/config
          kubectl version
      - name: Add /usr/local/bin to PATH
        run: |
          echo "/usr/local/bin" >> $GITHUB_PATH
      - name: Install helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELM_CURRENT }}
        id: install
#      - name: Setup tmate session if timeout waiting for pods to start
#        uses: mxschmitt/action-tmate@v3
      - name: Validate Helm Chart
        run: |
          ./ci/validate-helm-build-images.sh $HELM_CAS_VERSION $HELM_BOOT_VERSION
          ./ci/validate-helm.sh
#      - name: Setup tmate session
#        if: ${{ failure() }}
#        uses: mxschmitt/action-tmate@v3
#        timeout-minutes: 10
