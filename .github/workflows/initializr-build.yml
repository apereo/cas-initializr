name: Initializr Build

env:
  TERM: xterm-256color
  JDK_CURRENT: 17
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PWD: ${{ secrets.DOCKER_PWD }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

##########################################################################

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Build Initializr
        run: ./gradlew --build-cache --configure-on-demand --no-daemon clean build -x test -x javadoc -x check --parallel
      - uses: actions/upload-artifact@v3
        with:
          name: binary-artifacts
          path: ./**/build/libs/*.*
  ##########################################################################
  latest-versions-cas:
    needs: [ build ]
    runs-on: ubuntu-latest
    outputs:
      supported-versions: ${{ steps.get-supported-versions.outputs.supported-versions }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      - id: print-supported-versions
        name: Print supported versions
        run: ./gradlew --no-daemon -q latestVersions | jq
      - id: get-supported-versions
        name: Get supported versions for matrix
        run: echo "::set-output name=supported-versions::$(./gradlew --no-daemon -q latestVersions)]}"
  ##########################################################################
  supported-versions-cas:
    needs: [ build ]
    runs-on: ubuntu-latest
    outputs:
      supported-versions: ${{ steps.get-supported-versions.outputs.supported-versions }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      - id: print-supported-versions
        name: Print supported versions
        run: ./gradlew --no-daemon -q versions-cas | jq
      - id: get-supported-versions
        name: Get supported versions for matrix
        run: echo "::set-output name=supported-versions::$(./gradlew --no-daemon -q versions-cas)]}"
  ##########################################################################
  supported-versions-cas-mgmt:
    needs: [ build ]
    runs-on: ubuntu-latest
    outputs:
      supported-versions: ${{ steps.get-supported-versions.outputs.supported-versions }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      - id: print-supported-versions
        name: Print supported versions
        run: ./gradlew --no-daemon -q versions-cas-mgmt | jq
      - id: get-supported-versions
        name: Get supported versions for matrix
        run: echo "::set-output name=supported-versions::$(./gradlew --no-daemon -q versions-cas-mgmt)]}"
  ##########################################################################
  sync-cas-mgmt-overlay:
    needs: [ supported-versions-cas-mgmt ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions-cas-mgmt.outputs.supported-versions)}}
    name: Sync CAS Mgmt Server ${{ matrix.versions.version }} Branch ${{ matrix.versions.branch }}
    steps:
      - uses: actions/checkout@v3
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
      - name: Set up JDK
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Initialize
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v3
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        with:
          name: binary-artifacts
      - name: Sync Overlay
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        run: ./ci/sync-overlay.sh ${{ matrix.versions.version }} ${{ matrix.versions.boot-version }} ${{ matrix.versions.branch }} cas-management-overlay
  ##########################################################################
  sync-cas-overlay:
    needs: [ supported-versions-cas ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions-cas.outputs.supported-versions)}}
    name: Sync CAS Server ${{ matrix.versions.version }} Branch ${{ matrix.versions.branch }}
    steps:
      - uses: actions/checkout@v3
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
      - name: Set up JDK
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Initialize
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v3
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        with:
          name: binary-artifacts
      - name: Sync Overlay
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        run: ./ci/sync-overlay.sh ${{ matrix.versions.version }} ${{ matrix.versions.boot-version }} ${{ matrix.versions.branch }} cas-overlay
  ##########################################################################
  validate-cas-overlay:
    needs: [ supported-versions-cas ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions-cas.outputs.supported-versions)}}
    name: Validate CAS Server ${{ matrix.versions.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      - name: Validate Overlay
        run: ./ci/validate-cas-overlay.sh ${{ matrix.versions.version }} ${{ matrix.versions.boot-version }}
  validate-cas-mgmt-overlay:
    needs: [ supported-versions-cas-mgmt ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions-cas-mgmt.outputs.supported-versions)}}
    name: Validate CAS Mgmt ${{ matrix.versions.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      - name: Validate Overlay
        run: ./ci/validate-cas-mgmt-overlay.sh ${{ matrix.versions.version }} ${{ matrix.versions.boot-version }}
  validate-cas-configserver-overlay:
    needs: [ supported-versions-cas ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions-cas.outputs.supported-versions)}}
    name: Validate Config Server ${{ matrix.versions.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      - name: Validate Overlay
        run: ./ci/validate-cas-configserver-overlay.sh ${{ matrix.versions.version }} ${{ matrix.versions.boot-version }}
  sync-cas-configserver-overlay:
    needs: [ supported-versions-cas ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions-cas.outputs.supported-versions)}}
    name: Sync CAS Config Server Server ${{ matrix.versions.version }} Branch ${{ matrix.versions.branch }}
    steps:
      - uses: actions/checkout@v3
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
      - name: Set up JDK
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Initialize
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v3
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        with:
          name: binary-artifacts
      - name: Sync Overlay
        if: ${{ matrix.versions.sync == true && github.event_name == 'push' && env.GH_TOKEN != null }}
        run: ./ci/sync-overlay.sh ${{ matrix.versions.version }} ${{ matrix.versions.boot-version }} ${{ matrix.versions.branch }} cas-config-server-overlay
  validate-cas-discoveryserver-overlay:
    needs: [ supported-versions-cas ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions-cas.outputs.supported-versions)}}
    name: Validate Discovery Server ${{ matrix.versions.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      - name: Validate Overlay
        run: ./ci/validate-cas-discoveryserver-overlay.sh ${{ matrix.versions.version }} ${{ matrix.versions.boot-version }}
  validate-cas-bootadminserver-overlay:
    needs: [ supported-versions-cas ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: ${{fromJSON(needs.supported-versions-cas.outputs.supported-versions)}}
    name: Validate BootAdmin Server ${{ matrix.versions.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      - name: Validate Overlay
        run: ./ci/validate-cas-bootadminserver-overlay.sh ${{ matrix.versions.version }} ${{ matrix.versions.boot-version }}
  publish:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      - name: Build Docker Image
        run: ./gradlew bootBuildImage
      - name: Publish Docker Image
        if: ${{ github.event_name == 'push' && env.DOCKER_USER != null && env.DOCKER_PWD != null }}
        run: |
          echo "${DOCKER_PWD}" | docker login --username "$DOCKER_USER" --password-stdin
          imageTag=(`./gradlew casVersion --q`)
          echo "Pushing Docker image with tag $imageTag"
          docker push apereo/cas-initializr:"$imageTag"
#      - name: Setup tmate session
#        if: ${{ failure() }}
#        uses: mxschmitt/action-tmate@v3
#        timeout-minutes: 10
