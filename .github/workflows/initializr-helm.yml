name: Initializr Helm Charts

env:
  TERM: xterm-256color
  HELM_CURRENT: v3.6.3
  JDK_CURRENT: 11
  JDK_DISTRO: 'temurin'

##########################################################################

on:
  push:
    branches: [ pr-* ]
  schedule:
    - cron: "0 0 * * 5"

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
  ##########################################################################
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: ${{ env.JDK_DISTRO }}
      - name: Build Initializr
        run: ./gradlew --build-cache --configure-on-demand --no-daemon clean build -x test -x javadoc -x check --parallel
      - uses: actions/upload-artifact@v2
        with:
          name: binary-artifacts
          path: ./**/build/libs/*.*
  ##########################################################################
  latest-versions-cas:
    runs-on: ubuntu-latest
    needs: [ build ]
    outputs:
      supported-versions: ${{ steps.get-supported-versions.outputs.supported-versions }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: ${{ env.JDK_DISTRO }}
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      - id: print-supported-versions
        name: Print supported versions
        run: ./gradlew --no-daemon -q latestVersions | jq
      - id: get-supported-versions
        name: Get supported versions for matrix
        run: echo "::set-output name=supported-versions::$(./gradlew --no-daemon -q latestVersions)]}"
  ##########################################################################
  helm:
    runs-on: ubuntu-latest
    needs: [ latest-versions-cas ]
    strategy:
      fail-fast: false
      matrix:
        k3s-version: [ v1.22.5,v1.21.4 ]
    env:
      GOPATH: /home/runner/go
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: ${{ env.JDK_DISTRO }}
      - uses: actions/download-artifact@v3
        with:
          name: binary-artifacts
      - name: Install K3S
        env:
          INSTALL_K3S_VERSION: ${{ matrix.k3s-version }}+k3s1
          INSTALL_K3S_EXEC: "--disable=traefik --flannel-backend=host-gw" # using ingress-nginx
        run: |
          set -x
          curl -sfL https://get.k3s.io | sh -
          sudo chmod -R a+rw /etc/rancher/k3s
          sudo mkdir -p $HOME/.kube && sudo chown -R runner $HOME/.kube
          sudo k3s kubectl config view --raw > $HOME/.kube/config
          sudo chown runner $HOME/.kube/config
          kubectl version
      - name: Add /usr/local/bin to PATH
        run: |
          echo "/usr/local/bin" >> $GITHUB_PATH
      - name: Install helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELM_CURRENT }}
        id: install
      #      - name: Setup tmate session if timeout waiting for pods to start
      #        uses: mxschmitt/action-tmate@v3
      - name: Build Images for Helm Chart
        env:
          HELM_CAS_VERSION: "${{ fromJSON(needs.latest-versions-cas.outputs.supported-versions).version }}"
          HELM_BOOT_VERSION: "${{ fromJSON(needs.latest-versions-cas.outputs.supported-versions).boot-version }}"
        run: ./ci/validate-helm-build-images.sh $HELM_CAS_VERSION $HELM_BOOT_VERSION
      - name: Validate Helm Chart
        run: ./ci/validate-helm.sh
