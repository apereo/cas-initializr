import org.apache.tools.ant.taskdefs.condition.*
import org.gradle.internal.logging.text.*
import org.apereo.cas.metadata.*
import java.nio.file.*
import java.lang.reflect.*
import org.gradle.internal.logging.text.*
import static org.gradle.internal.logging.text.StyledTextOutput.Style

buildscript {
    repositories {
        if (project.privateRepoUrl) {
          maven {
            url project.privateRepoUrl
            credentials {
              username = project.privateRepoUsername
              password = System.env.PRIVATE_REPO_TOKEN
            }
          }
        }
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        {{#casServer}}
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            mavenContent { snapshotsOnly() }
        }
        {{/casServer}}
        maven {
            url "https://repo.spring.io/milestone"
            mavenContent { releasesOnly() }
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "io.freefair.gradle:maven-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${project.gradleFreeFairPluginVersion}"
        {{#dockerSupported}}
        classpath "com.google.cloud.tools:jib-gradle-plugin:${project.jibVersion}"
        classpath "com.bmuschko:gradle-docker-plugin:${project.gradleDockerPluginVersion}"
        {{/dockerSupported}}
        {{#casServer}}
        {{#nativeImageSupported}}
        classpath "org.graalvm.buildtools:native-gradle-plugin:${project.gradleGraalVmNativePluginVersion}"
        {{/nativeImageSupported}}
        {{#sbomSupported}}
        classpath "org.cyclonedx:cyclonedx-gradle-plugin:${project.gradleCyclonePluginVersion}"
        {{/sbomSupported}}
        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.apereo.cas:cas-server-core-api-configuration-model:${project.'cas.version'}"
        classpath "org.apereo.cas:cas-server-core-configuration-metadata-repository:${project.'cas.version'}"
        {{/casServer}}
    }
}

repositories {
    if (project.privateRepoUrl) {
      maven {
        url project.privateRepoUrl
        credentials {
          username = project.privateRepoUsername
          password = System.env.PRIVATE_REPO_TOKEN
        }
      }
    }
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
        mavenContent { snapshotsOnly() }
    }
    maven {
        url "https://repository.apache.org/content/repositories/snapshots"
        mavenContent { snapshotsOnly() }
    }
    maven {
        url 'https://build.shibboleth.net/nexus/content/repositories/releases/'
        mavenContent { releasesOnly() }
    }
    maven {
        url "https://build.shibboleth.net/nexus/content/repositories/snapshots"
        mavenContent { snapshotsOnly() }
    }
    maven {
        url "https://repo.spring.io/milestone"
        mavenContent { releasesOnly() }
    }
}

{{#nativeImageSupported}}
def nativeImage = project.hasProperty("nativeImage") && Boolean.valueOf(project.getProperty("nativeImage"))
if (!nativeImage) {
    apply plugin: "io.freefair.war-overlay"
    apply plugin: "war"
}
{{/nativeImageSupported}}
{{^nativeImageSupported}}
apply plugin: "io.freefair.war-overlay"
apply plugin: "war"
{{/nativeImageSupported}}

apply plugin: "org.springframework.boot"
apply plugin: "io.freefair.lombok"

{{#sbomSupported}}
apply plugin: "org.cyclonedx.bom"
{{/sbomSupported}}

{{#nativeImageSupported}}
apply plugin: "org.graalvm.buildtools.native"
{{/nativeImageSupported}}

apply from: rootProject.file("gradle/springboot.gradle")
{{#dockerSupported}}
apply plugin: "com.google.cloud.tools.jib"
apply plugin: "com.bmuschko.docker-remote-api"
{{/dockerSupported}}
apply from: rootProject.file("gradle/tasks.gradle")

def out = services.get(StyledTextOutputFactory).create("cas")

configurations {
    all {
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
            cacheDynamicVersionsFor 0, "seconds"
            preferProjectModules()
            def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
            if (failIfConflict) {
                failOnVersionConflict()
            }

            if (project.hasProperty("tomcatVersion")) {
                eachDependency { DependencyResolveDetails dependency ->
                    def requested = dependency.requested
                    if (requested.group.startsWith("org.apache.tomcat") && requested.name != "jakartaee-migration")  {
                        dependency.useVersion("${tomcatVersion}")
                    }
                }
            }
        }
        exclude(group: "cglib", module: "cglib")
        exclude(group: "cglib", module: "cglib-full")
        exclude(group: "org.slf4j", module: "slf4j-log4j12")
        exclude(group: "org.slf4j", module: "slf4j-simple")
        exclude(group: "org.slf4j", module: "jcl-over-slf4j")
        exclude(group: "org.apache.logging.log4j", module: "log4j-to-slf4j")
        {{#nativeImageSupported}}
        if (nativeImage) {
            exclude(group: "org.apache.groovy", module: "groovy-templates")
        }
        {{/nativeImageSupported}}
    }
}

{{#nativeImageSupported}}
if (!nativeImage) {
    war {
        entryCompression = ZipEntryCompression.STORED
        enabled = false
    }
}
{{/nativeImageSupported}}
{{^nativeImageSupported}}
war {
    entryCompression = ZipEntryCompression.STORED
    enabled = false
}
{{/nativeImageSupported}}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.targetCompatibility)
        {{^nativeImageSupported}}
        def chosenJvmVendor = null
        JvmVendorSpec.declaredFields.each { field ->
            if (field.type == JvmVendorSpec && Modifier.isStatic(field.getModifiers())) {
                if (field.name == project.jvmVendor?.toUpperCase()) {
                    chosenJvmVendor = field.get(null)
                    return
                }
            }
        }
        if (chosenJvmVendor != null) {
            vendor = chosenJvmVendor
            out.withStyle(Style.Success).println("Using ${chosenJvmVendor} as the JVM vendor for the Java toolchain")
        } else {
            out.withStyle(Style.Info).println("JVM vendor ${project.jvmVendor} is not recognized")
        }
        {{/nativeImageSupported}}
    }
}

{{#dockerSupported}}
bootBuildImage {
    imageName = "${project.'containerImageOrg'}/${project.'containerImageName'}:${project.version}"
}
{{/dockerSupported}}

{{#nativeImageSupported}}
if (nativeImage) {
    sourceSets {
        graal {
            java {
                srcDirs("src/main/graal")
            }
        }
    }
}

configurations {
    nativeImageClasspath.extendsFrom(graalImplementation)
}

graalvmNative {
    metadataRepository {
        enabled = true
        version = "${graalVmMetadataRepositoryVersion}"
    }

    /*
    The toolchain detection cannot distinguish between
    GraalVM JDKs and standard JDKs without Native Image support.
    */
    toolchainDetection = false

    binaries {
        main {
            imageName = "cas"
            quickBuild = false
            debug = true
            verbose = false
            richOutput = true

            configurationFileDirectories.from(file('src/graal'))

            buildArgs.add('--allow-incomplete-classpath')
            buildArgs.add('-H:+ReportExceptionStackTraces')
            buildArgs.add('-H:+InlineBeforeAnalysis')
            buildArgs.add('-H:+TraceSecurityServices')
            buildArgs.add('-H:+UnlockExperimentalVMOptions')

            buildArgs.add('-J-Xmx14G')
            buildArgs.add('-J-Xms4G')
            buildArgs.add('--native-image-info')
            buildArgs.add('-march=native')

            buildArgs.add('--trace-class-initialization=true')

            buildArgs.add('--initialize-at-build-time=java.beans')
            buildArgs.add('--initialize-at-build-time=com.sun.beans')
            buildArgs.add('--initialize-at-build-time=groovyjarjarantlr4.v4.runtime')
            buildArgs.add('--initialize-at-build-time=org.codehaus.groovy')
            buildArgs.add('--initialize-at-build-time=org.apache.groovy')
            buildArgs.add('--initialize-at-build-time=groovy.lang')

            buildArgs.add('--initialize-at-run-time=com.sun.xml.ws')
            buildArgs.add('--initialize-at-run-time=groovy.grape.GrapeIvy')
            buildArgs.add("--initialize-at-run-time=org.bouncycastle.jcajce.provider.drbg.DRBG\$Default")
            buildArgs.add("--initialize-at-run-time=org.bouncycastle.jcajce.provider.drbg.DRBG\$NonceAndIV")

            buildArgs.add('--features=org.apereo.cas.nativex.features.DefaultNativeImageFeature')
            buildArgs.add('--enable-url-protocols=jar,file,resource,http,https')

            /*
            buildArgs.add("-g")
            buildArgs.add("-O0")
            */
        }
    }
}

processAot {
    enabled = nativeImage

    def list = []
    list.add("--add-opens")
    list.add("java.base/java.lang=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.util=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.time=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.net=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.security.action=jdk.crypto.ec")
    list.add("--add-opens")
    list.add("java.base/java.nio=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.management/sun.management=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("jdk.management/com.sun.management.internal=ALL-UNNAMED")
    list.add("-Xdebug")
    list.add("-Xrunjdwp:transport=dt_socket,address=*:5005,server=y,suspend=n")

    jvmArgs = list
    systemProperties System.properties

    args(
        '--spring.profiles.active=native',
        '--logging.level.org.apereo.cas=info',
        '--logging.level.org.springframework.core.env=info',
        '--logging.level.org.springframework.boot=info',
        '--logging.level.org.springframework.security=warn'
    )
}
{{/nativeImageSupported}}

{{#dockerSupported}}
['jibDockerBuild', 'jibBuildTar', 'jib'].each { taskName ->
    if (gradle.gradleVersion >= "8.0") {
        getTasksByName(taskName, true).each(it -> {
            it.notCompatibleWithConfigurationCache("Jib is not compatible with configuration cache");
            it.enabled = !gradle.startParameter.isConfigurationCacheRequested()
        })
    }
}

def imagePlatforms = project.dockerImagePlatform.split(",")
def dockerUsername = providers.systemProperty("dockerUsername").getOrNull()
def dockerPassword = providers.systemProperty("dockerPassword").getOrNull()
def imageTagPostFix = providers.systemProperty("dockerImageTagPostfix").getOrElse("")

jib {
    if (gradle.gradleVersion >= "8.0" && gradle.startParameter.isConfigurationCacheRequested()) {
        out.withStyle(Style.Info).println("You are seeing this message because the Gradle configuration cache is turned on")
        out.withStyle(Style.Info).println("Running Jib tasks to produce Docker images will require the command-line option: --no-configuration-cache")
        out.withStyle(Style.Info).println("Jib does not support the Gradle configuration cache; Please see https://github.com/GoogleContainerTools/jib/issues/3132")
        out.withStyle(Style.Info).println("Jib tasks are disabled.")
    }
    from {
        image = project.baseDockerImage
        platforms {
            imagePlatforms.each {
                def given = it.split(":")
                platform {
                    architecture = given[0]
                    os = given[1]
                }
            }
        }
    }
    to {
        image = "${project.'containerImageOrg'}/${project.'containerImageName'}:${project.version}"
        /**
             ecr-login: Amazon Elastic Container Registry (ECR)
             gcr: Google Container Registry (GCR)
             osxkeychain: Docker Hub
         */
        credHelper = "osxkeychain"
        if (dockerUsername != null && dockerPassword != null) {
            auth {
                username = "${dockerUsername}"
                password = "${dockerPassword}"
            }
        }
        tags = [project.version]
    }
    container {
        creationTime = "USE_CURRENT_TIMESTAMP"
        entrypoint = ['/docker/entrypoint.sh']
        ports = ['80', '443', '8080', '8443', '8444', '8761', '8888', '5000']
        labels = [version:project.version, name:project.name, group:project.group, org:project.containerImageOrg]
        workingDirectory = '/docker/cas/war'
    }
    extraDirectories {
        paths {
          path {
            from = file('src/main/jib')
          }
          path {
            from = file('etc/cas')
            into = '/etc/cas'
          }
          path {
            from = file("build/libs")
            into = "/docker/cas/war"
          }
        }
        permissions = [
            '/docker/entrypoint.sh': '755'
        ]
    }
    allowInsecureRegistries = project.allowInsecureRegistries
}

import com.bmuschko.gradle.docker.tasks.image.*
tasks.register("casBuildDockerImage", DockerBuildImage) {
    dependsOn("build")

    def imageTag = "${project.'cas.version'}"
    inputDir = project.projectDir
    images.add("apereo/cas:${imageTag}${imageTagPostFix}")
    images.add("apereo/cas:latest${imageTagPostFix}")
    if (dockerUsername != null && dockerPassword != null) {
        username = dockerUsername
        password = dockerPassword
    }
    doLast {
        out.withStyle(Style.Success).println("Built CAS images successfully.")
    }
}

tasks.register("casPushDockerImage", DockerPushImage) {
    dependsOn("casBuildDockerImage")

    def imageTag = "${project.'cas.version'}"
    images.add("apereo/cas:${imageTag}${imageTagPostFix}")
    images.add("apereo/cas:latest${imageTagPostFix}")

    if (dockerUsername != null && dockerPassword != null) {
        username = dockerUsername
        password = dockerPassword
    }
    doLast {
        out.withStyle(Style.Success).println("Pushed CAS images successfully.")
    }
}
{{/dockerSupported}}


if (project.hasProperty("appServer")) {
    def appServer = project.findProperty('appServer') ?: ''
    out.withStyle(Style.Success).println("Building CAS version ${project.version} with application server ${appServer}")
} else {
    out.withStyle(Style.Success).println("Building CAS version ${project.version} without an application server")
}

dependencies {
    /**
    * Do NOT modify the lines below or else you will risk breaking dependency management.
    **/
    implementation enforcedPlatform("org.apereo.cas:cas-server-support-bom:${project.'cas.version'}")
    implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    {{#casServer}}

    {{#nativeImageSupported}}
    if (nativeImage) {
        nativeImageCompileOnly sourceSets.graal.output.classesDirs

        graalCompileOnly "org.graalvm.nativeimage:svm:${graalVmVersion}"
        graalCompileOnly "org.graalvm.sdk:graal-sdk:${graalVmVersion}"

        implementation "org.apereo.cas:cas-server-webapp-native"
    } else {
        /**
         * Do NOT modify the lines below or else you will risk breaking the build.
         */
        implementation "org.apereo.cas:cas-server-core-api-configuration-model"
        implementation "org.apereo.cas:cas-server-webapp-init"

        developmentOnly "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
    }
    {{/nativeImageSupported}}
    {{^nativeImageSupported}}
    /**
     * Do NOT modify the lines below or else you will risk breaking the build.
     **/
    implementation "org.apereo.cas:cas-server-core-api-configuration-model"
    implementation "org.apereo.cas:cas-server-webapp-init"

    if (appServer == 'tomcat') {
        implementation "org.apereo.cas:cas-server-webapp-init-tomcat"
    }
    
    developmentOnly "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
    {{/nativeImageSupported}}
    {{/casServer}}
        
    /**
     * CAS dependencies and modules may be listed here.
     *
     * There is no need to specify the version number for each dependency
     * since versions are all resolved and controlled by the dependency management
     * plugin via the CAS bom.
     **/
    {{#dependencies}}
    implementation "{{groupId}}:{{artifactId}}"
    {{/dependencies}}

    {{#configServer}}
    compileOnly "org.apereo.cas:cas-server-webapp-init-config-server"
    {{/configServer}}

    
    testImplementation "org.springframework.boot:spring-boot-starter-test"
}

