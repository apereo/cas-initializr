import org.apache.tools.ant.taskdefs.condition.*
import org.gradle.internal.logging.text.*
import org.apereo.cas.metadata.*
import java.nio.file.*
import static org.gradle.internal.logging.text.StyledTextOutput.Style

buildscript {
    repositories {
        if (project.privateRepoUrl) {
          maven {
            url project.privateRepoUrl
            credentials {
              username = project.privateRepoUsername
              password = System.env.PRIVATE_REPO_TOKEN
            }
          }
        }
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        {{#casServer}}
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            mavenContent { snapshotsOnly() }
        }
        {{/casServer}}
        maven {
            url "https://repo.spring.io/milestone"
            mavenContent { releasesOnly() }
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "io.freefair.gradle:maven-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${project.gradleDependencyManagementPluginVersion}"
        {{#dockerSupported}}
        classpath "com.google.cloud.tools:jib-gradle-plugin:${project.jibVersion}"
        {{/dockerSupported}}

        {{#casServer}}
        {{#nativeImageSupported}}
        classpath "org.graalvm.buildtools:native-gradle-plugin:${project.gradleGraalVmNativePluginVersion}"
        {{/nativeImageSupported}}
        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.apereo.cas:cas-server-core-api-configuration-model:${project.'cas.version'}"
        classpath "org.apereo.cas:cas-server-core-configuration-metadata-repository:${project.'cas.version'}"
        {{/casServer}}
    }
}

repositories {
    if (project.privateRepoUrl) {
      maven {
        url project.privateRepoUrl
        credentials {
          username = project.privateRepoUsername
          password = System.env.PRIVATE_REPO_TOKEN
        }
      }
    }
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
        mavenContent { snapshotsOnly() }
    }
    maven {
        url "https://repository.apache.org/content/repositories/snapshots"
        mavenContent { snapshotsOnly() }
    }
    maven {
        url 'https://build.shibboleth.net/nexus/content/repositories/releases/'
        mavenContent { releasesOnly() }
    }
    maven {
        url "https://build.shibboleth.net/nexus/content/repositories/snapshots"
        mavenContent { snapshotsOnly() }
    }
    maven {
        url "https://repo.spring.io/milestone"
        mavenContent { releasesOnly() }
    }
    maven {
        url "https://jitpack.io"
        content {
            includeGroupByRegex ".*wss4j.*"
        }
        mavenContent { releasesOnly() }
    }
}

{{#springDependencyMgmt}}
apply plugin: "io.spring.dependency-management"
{{/springDependencyMgmt}}

{{#nativeImageSupported}}
def nativeImage = project.hasProperty("nativeImage") && Boolean.valueOf(project.getProperty("nativeImage"))
if (!nativeImage) {
    apply plugin: "io.freefair.war-overlay"
    apply plugin: "war"
}
{{/nativeImageSupported}}
{{^nativeImageSupported}}
apply plugin: "io.freefair.war-overlay"
apply plugin: "war"
{{/nativeImageSupported}}

apply plugin: "org.springframework.boot"
apply plugin: "io.freefair.lombok"

apply from: rootProject.file("gradle/springboot.gradle")
{{#dockerSupported}}
apply from: rootProject.file("gradle/jib.gradle")
{{/dockerSupported}}
apply from: rootProject.file("gradle/tasks.gradle")

{{#springDependencyMgmt}}
dependencyManagement {
    imports {
        {{#managementServer}}
        mavenBom "org.apereo.cas:cas-mgmt-support-bom:${project.'casmgmt.version'}"
        {{/managementServer}}
        mavenBom "org.apereo.cas:cas-server-support-bom:${project.'cas.version'}"
    }
}
{{/springDependencyMgmt}}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
        cacheDynamicVersionsFor 0, "seconds"
        preferProjectModules()
        def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
        if (failIfConflict) {
            failOnVersionConflict()
        }
    }
    exclude(group: "cglib", module: "cglib")
    exclude(group: "cglib", module: "cglib-full")
    exclude(group: "org.slf4j", module: "slf4j-log4j12")
    exclude(group: "org.slf4j", module: "slf4j-simple")
    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
    exclude(group: "org.apache.logging.log4j", module: "log4j-to-slf4j")
}

{{#nativeImageSupported}}
if (!nativeImage) {
    war {
        entryCompression = ZipEntryCompression.STORED
        enabled = false
    }
}
{{/nativeImageSupported}}
{{^nativeImageSupported}}
war {
    entryCompression = ZipEntryCompression.STORED
    enabled = false
}
{{/nativeImageSupported}}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.targetCompatibility)
    }
}

{{#dockerSupported}}
bootBuildImage {
    imageName = "${project.'containerImageOrg'}/${project.'containerImageName'}:${project.version}"
}
{{/dockerSupported}}

{{#nativeImageSupported}}
configurations {
    nativeImageClasspath.extendsFrom(graalImplementation)
}

graalvmNative {
    metadataRepository {
        enabled = true
        version = "${graalVmMetadataRepositoryVersion}"
    }

    /*
    The toolchain detection cannot distinguish between
    GraalVM JDKs and standard JDKs without Native Image support.
    */
    toolchainDetection = false

    binaries {
        main {
            imageName = "cas"
            quickBuild = false
            debug = true
            verbose = false
            richOutput = true

            configurationFileDirectories.from(file('src/graal'))

            buildArgs.add('--allow-incomplete-classpath')
            buildArgs.add('-H:+ReportExceptionStackTraces')
            buildArgs.add('-H:+InlineBeforeAnalysis')
            buildArgs.add('-H:+TraceSecurityServices')

            buildArgs.add('--initialize-at-build-time=org.hibernate.internal.util.ReflectHelper')

            buildArgs.add('--initialize-at-build-time=java.beans.Introspector')
            buildArgs.add('--initialize-at-build-time=com.sun.beans')

            buildArgs.add('--initialize-at-build-time=groovyjarjarantlr4.v4.runtime')
            buildArgs.add('--initialize-at-build-time=org.codehaus.groovy')
            buildArgs.add('--initialize-at-build-time=org.apache.groovy')
            buildArgs.add('--initialize-at-build-time=groovy.lang')

            buildArgs.add('--initialize-at-run-time=com.sun.xml.ws,org.codehaus.groovy.control.XStreamUtils,org.codehaus.groovy.vmplugin.v8.Java8\$LookupHolder,groovy.grape.GrapeIvy')
            buildArgs.add("--initialize-at-run-time=org.bouncycastle.jcajce.provider.drbg.DRBG\$Default,org.bouncycastle.jcajce.provider.drbg.DRBG\$NonceAndIV")

            buildArgs.add('--features=org.apereo.cas.nativex.features.BouncyCastleProviderFeature')

            buildArgs.add('--enable-url-protocols=jar')

            /*
            buildArgs.add("-g")
            buildArgs.add("-O0")
            */
        }
    }
}

processAot {
    enabled = nativeImage

    def list = []
    list.add("--add-opens")
    list.add("java.base/java.lang=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.util=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.time=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.net=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.security.action=jdk.crypto.ec")
    list.add("--add-opens")
    list.add("java.base/java.nio=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.management/sun.management=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("jdk.management/com.sun.management.internal=ALL-UNNAMED")
    list.add("-Xdebug")
    list.add("-Xrunjdwp:transport=dt_socket,address=*:5005,server=y,suspend=n")

    jvmArgs = list

    args(
        '--spring.profiles.active=native',
        '--logging.level.org.apereo.cas=info',
        '--logging.level.org.springframework.core.env=info',
        '--logging.level.org.springframework.boot=info',
        '--logging.level.org.springframework.security=warn'
    )
}
{{/nativeImageSupported}}

dependencies {
    {{^springDependencyMgmt}}
    /**
    * Do NOT modify the lines below or else you will risk breaking dependency management.
    */
    {{#managementServer}}
    implementation enforcedPlatform("org.apereo.cas:cas-mgmt-support-bom:${project.'casmgmt.version'}")
    implementation enforcedPlatform("org.apereo.cas:cas-server-support-bom:${project.'cas.version'}")
    {{/managementServer}}
    {{^managementServer}}
    implementation enforcedPlatform("org.apereo.cas:cas-server-support-bom:${project.'cas.version'}")
    {{/managementServer}}
    implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    {{/springDependencyMgmt}}

    {{#casServer}}
    {{#nativeImageSupported}}
    if (nativeImage) {
        nativeImageCompileOnly sourceSets.graal.output.classesDirs

        graalCompileOnly "org.graalvm.nativeimage:svm:${graalVmVersion}"
        graalCompileOnly "org.graalvm.sdk:graal-sdk:${graalVmVersion}"

        implementation("org.apereo.cas:cas-server-webapp-native")
    } else {
        /**
         * Do NOT modify the lines below or else you will risk breaking the build.
         */
        implementation "org.apereo.cas:cas-server-core-api-configuration-model"
        implementation "org.apereo.cas:cas-server-webapp-init"

        developmentOnly "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
    }
    {{/nativeImageSupported}}
    {{^nativeImageSupported}}
    /**
     * Do NOT modify the lines below or else you will risk breaking the build.
     */
    implementation "org.apereo.cas:cas-server-core-api-configuration-model"
    implementation "org.apereo.cas:cas-server-webapp-init"

    developmentOnly "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
    {{/nativeImageSupported}}
    {{/casServer}}
        
    /**
     * CAS dependencies and modules may be listed here.
     *
     * There is no need to specify the version number for each dependency
     * since versions are all resolved and controlled by the dependency management
     * plugin via the CAS bom.
     **/
    {{#dependencies}}
    implementation "{{groupId}}:{{artifactId}}"
    {{/dependencies}}
 
    {{#casServer}}

    if (project.hasProperty("casModules")) {
        def dependencies = project.getProperty("casModules").split(",")
        dependencies.each {
            def projectsToAdd = rootProject.subprojects.findAll {project ->
                project.name == "cas-server-core-${it}" || project.name == "cas-server-support-${it}"
            }
            projectsToAdd.each {implementation it}
        }
    }
    {{/casServer}}
    {{#springBootAdminServer}}
    compileOnly "org.apereo.cas:cas-server-webapp-init-bootadmin-server"
    {{/springBootAdminServer}}
    {{#configServer}}
    compileOnly "org.apereo.cas:cas-server-webapp-init-config-server"
    {{/configServer}}
    {{#managementServer}}
    compileOnly "org.apereo.cas:cas-mgmt-webapp-init"
    {{/managementServer}}
    {{#discoveryServer}}
    compileOnly "org.apereo.cas:cas-server-webapp-init-eureka-server"
    {{/discoveryServer}}
    
    testImplementation "org.springframework.boot:spring-boot-starter-test"
}

