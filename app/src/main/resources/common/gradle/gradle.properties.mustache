{{#managementServer}}
# This overlay project's version
version={{casMgmtVersion}}
# CAS Management version
casmgmt.version={{casMgmtVersion}}

# This is the CAS server version that is compatible
# with the build/version of the CAS management web application.
cas.version={{casMgmtCasVersion}}
{{/managementServer}}

{{^managementServer}}
# This overlay project's version
version={{casVersion}}
# This is the CAS server version that will be deployed.
# Versions typically are in the format of:
#   [Major].[Minor].[Patch].[Security]
# For patch and security releases and unless explicitly stated otherwise, the below property
# and NOTHING ELSE is the only change you need to make to upgrade your CAS deployment.
cas.version={{casVersion}}
{{/managementServer}}

springBootVersion={{springBootVersion}}

# The version of this overlay project
group={{groupId}}
artifactId={{buildSystemId}}

# Before changing the JDK versions here, you must account for the following:
# - Dependency Compatibility: Ensure that all libraries and frameworks you use are compatible with Java {{javaVersion}} and above.
# - Environment Compatibility: Check that your deployment environments (e.g., servers, CI/CD pipelines, cloud services) support Java {{javaVersion}} and above.
# Remember that this CAS build does and will only officially support Java {{javaVersion}}. Do NOT change platform requirements unless
# you really know what you are doing and are comfortable managing the deployment and its risks completely on your own.

# This property defines the version of Java that your source code is written in.
# It ensures that your code is compatible with the specified version of the Java language.
# Gradle will expect your source code to be compatible with JDK {{javaVersion}}.
sourceCompatibility={{javaVersion}}

# This property specifies the version of the Java runtime that the compiled bytecode should be compatible with.
# It ensures that the bytecode generated by the compiler will run on JDK {{javaVersion}}.
targetCompatibility={{javaVersion}}

# This property controls the JVM vendor that is used to by Gradle toolchains.
# You may want to build CAS using a Java version that is not supported for running Gradle
# by setting this property to the vendor of the JDK you want to use.
# Other options include: AMAZON, ADOPTIUM, JETBRAINS, MICROSOFT, ORACLE, SAP, BELLSOFT, etc.
jvmVendor=AMAZON

gradleFreeFairPluginVersion=@gradleFreeFairPluginVersion@
gradleDependencyManagementPluginVersion=@gradleDependencyManagementPluginVersion@

{{#dockerSupported}}
# Used to build docker images
jibVersion={{jibVersion}}
gradleDockerPluginVersion=@gradleDockerPluginVersion@
gradleFoojayPluginVersion=@gradleFoojayPluginVersion@

# Specify the coordinates of the container image to build
containerImageOrg={{containerImageOrg}}
containerImageName={{containerImageName}}

baseDockerImage={{containerBaseImageName}}
allowInsecureRegistries=false

# Multiple platforms may be specified, separated by a comma i.e amd64:linux,arm64:linux
dockerImagePlatform=amd64:linux
{{/dockerSupported}}

{{#appServer}}
# Include launch script for executable WAR artifact
# Setting this to true allows the final web application
# to be fully executable on its own
executable={{executable}}
{{#nativeImageSupported}}
# Control whether the final outcome of the Gradle build
# should be a native image that is built via GraalVM
nativeImage=false
graalVmVersion=@graalVmVersion@
graalVmMetadataRepositoryVersion=@graalVmMetadataRepositoryVersion@
gradleGraalVmNativePluginVersion=@gradleGraalVmNativePluginVersion@
{{/nativeImageSupported}}

{{#sbomSupported}}
# The plugin creates an aggregate of all dependencies of a project
# and creates a valid SBOM, designed for use in application security contexts
# and supply chain component analysis.
gradleCyclonePluginVersion=@gradleCyclonePluginVersion@
{{/sbomSupported}}
{{/appServer}}

# Use -tomcat, -jetty, -undertow for deployment to other embedded containers
# if the overlay application supports or provides the chosen type.
# You should set this to blank if you want to deploy to an external container.
# and want to set up, download and manage the container (i.e. Apache Tomcat) yourself.
appServer={{appServer}}

# If you are using an embedded Apache Tomcat container to deploy and run CAS,
# and need to override the Apache Tomcat version, uncomment the property below
# and specify the the Apache Tomcat version, i.e. {{tomcatVersion}}.
# While enabled, this will override any and all upstream changes to
# Apache Tomcat dependency management and you will be directly responsible to make
# adjustments and upgrades as necessary. Use with caution, favor less work.
# tomcatVersion={{tomcatVersion}}

# Settings to generate keystore
# used by the build to assist with creating
# self-signed certificates for https endpoints
certDir=/etc/cas
serverKeystore=thekeystore
exportedServerCert=cas.crt
storeType=PKCS12

{{#casServer}}
# Location of the downloaded CAS Shell JAR
shellDir=build/libs
ivyVersion=2.5.2
gradleDownloadTaskVersion=@gradleDownloadTaskPluginVersion@
{{/casServer}}

# Include private repository
# override these in user properties or pass in values from env on command line
privateRepoUrl=
privateRepoUsername=

# Gradle build settings
org.gradle.configureondemand=true
org.gradle.caching=true
org.gradle.parallel=true
org.gradle.jvmargs=-Xms1024m -Xmx4048m -XX:TieredStopAtLevel=1
org.gradle.unsafe.configuration-cache=false
org.gradle.unsafe.configuration-cache-problems=warn
