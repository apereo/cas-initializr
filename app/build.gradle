buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.yaml:snakeyaml:2.3"
    }
}

plugins {
    id "org.springframework.boot" version "${springBootInitializrVersion}"
    id "io.spring.dependency-management" version "${gradleDependencyManagementPluginVersion}"
    id "io.freefair.lombok" version "${gradleFreeFairPluginVersion}"
    id "java-library"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
        mavenContent { snapshotsOnly() }
    }
}

dependencyManagement {
    imports {
        mavenBom "io.spring.initializr:initializr-bom:${springInitializrVersion}"
    }
}

springBoot {
    buildInfo()
    mainClass.set("org.apereo.cas.CasInitializrApplication")
}

//sourceSets {
//    main {
//        resources {
//            srcDir new File("${buildDir}/resources/main")
//        }
//    }
//}

dependencies {
    implementation "org.jooq:jool:0.9.15"
    implementation "org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r"
    implementation "commons-io:commons-io:2.17.0"
    implementation "com.github.vladimir-bukhtoyarov:bucket4j-core:8.0.1"
    implementation "com.github.spullara.mustache.java:compiler:0.9.14"
    
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.springframework.retry:spring-retry"

    implementation("javax.cache:cache-api")
    implementation("org.ehcache:ehcache:3.10.8")

    implementation "io.spring.initializr:initializr-web"
    implementation "io.spring.initializr:initializr-actuator"
    implementation "io.spring.initializr:initializr-generator-spring"
    implementation "io.spring.initializr:initializr-generator"
    implementation "io.spring.initializr:initializr-generator"

    runtimeOnly "org.springframework.boot:spring-boot-starter-tomcat"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
}

bootBuildImage {
    imageName = "apereo/cas-initializr:${project.version}"
}

bootJar {
    archiveFileName = "app.jar"
    archiveBaseName = "app"
}

bootRun {
    def list = []
    list.add("-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n")

    jvmArgs = list

    def appArgList = []
    args = appArgList
}


processResources {
    /*
        To support the Gradle configuration cache...
    */
    def version = project.providers.gradleProperty("version").get()
    def gradleFreeFairPluginVersion = project.providers.gradleProperty("gradleFreeFairPluginVersion").get()
    def gradleDownloadTaskPluginVersion = project.providers.gradleProperty("gradleDownloadTaskPluginVersion").get()
    def openRewriteVersion = project.providers.gradleProperty("openRewriteVersion").get()
    def jibVersion = project.providers.gradleProperty("jibVersion").get()
    def gradleDockerPluginVersion = project.providers.gradleProperty("gradleDockerPluginVersion").get()
    def gradleFoojayPluginVersion = project.providers.gradleProperty("gradleFoojayPluginVersion").get()

    def springBootLatestVersion = project.providers.gradleProperty("springBootLatestVersion").get()
    def gradleLatestVersion = project.providers.gradleProperty("gradleLatestVersion").get()

    def apacheTomcat10LatestVersion = project.providers.gradleProperty("apacheTomcat10LatestVersion").get()
    def casLatestVersion = project.providers.gradleProperty("casLatestVersion").get()

    def graalVmVersion = project.providers.gradleProperty("graalVmVersion").get()
    def graalVmMetadataRepositoryVersion = project.providers.gradleProperty("graalVmMetadataRepositoryVersion").get()
    def gradleGraalVmNativePluginVersion = project.providers.gradleProperty("gradleGraalVmNativePluginVersion").get()
    def gradleCyclonePluginVersion = project.providers.gradleProperty("gradleCyclonePluginVersion").get()

    filesMatching("**/application-*.yml") {
        expand (
                springBootLatestVersion: springBootLatestVersion,
                apacheTomcat10LatestVersion: apacheTomcat10LatestVersion,
                gradleLatestVersion: gradleLatestVersion,
                casLatestVersion: casLatestVersion,
                "openRewriteVersion"         : openRewriteVersion,
                jibVersion: jibVersion
        )
    }

    filesMatching(['**/*.yml', '**/*.properties', '**/*.md', '**/*.mustache']) {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                "version"                                : version,
                "gradleFreeFairPluginVersion"            : gradleFreeFairPluginVersion,
                "gradleDownloadTaskPluginVersion"        : gradleDownloadTaskPluginVersion,
                "openRewriteVersion"                     : openRewriteVersion,
                "jibVersion"                             : jibVersion,
                "gradleDockerPluginVersion"              : gradleDockerPluginVersion,
                "gradleFoojayPluginVersion"              : gradleFoojayPluginVersion,
                "graalVmVersion"                         : graalVmVersion,
                "graalVmMetadataRepositoryVersion"       : graalVmMetadataRepositoryVersion,
                "gradleGraalVmNativePluginVersion"       : gradleGraalVmNativePluginVersion,
                "gradleCyclonePluginVersion"             : gradleCyclonePluginVersion
        ]
    }
}

def supportedTypes = ["cas"]
supportedTypes.forEach({ type ->
    project.tasks.create(name: "versions-${type}",
                         description: "Display supported versions",
                         dependsOn: build) {

        def file = file("${project.buildDir}/resources/main/application-initializr.yml")
        doLast {
            def yaml = new org.yaml.snakeyaml.Yaml()
            def config = yaml.load(file.newInputStream())
            def supportedVersions = config.'cas-initializr'.'supported-versions'
            def results = supportedVersions.findAll { ver -> ver.type == type }
            println(groovy.json.JsonOutput.toJson(results))
        }
    }
})

tasks.register('latestCasVersion') {
    description "Display latest CAS version"

    def casLatestVersion = project.providers.gradleProperty("casLatestVersion").get()
    def springBootLatestVersion = project.providers.gradleProperty("springBootLatestVersion").get()
    doLast {
        def results = [version: casLatestVersion,
                       'boot-version': springBootLatestVersion]
        println(groovy.json.JsonOutput.toJson(results))
    }
}


tasks.register('latestCasVersions') {
    description "Display latest CAS versions"
    def casLatestVersion = project.providers.gradleProperty("casLatestVersion").get()
    doLast {
        def results = ['cas-version': casLatestVersion]
        println(groovy.json.JsonOutput.toJson(results))
    }
}

tasks.register('copyWrapper', Copy) {
    doLast {
        from "../gradle/wrapper"
        into "src/main/resources/common/gradle/wrapper"
    }
}

tasks.register('copyWrapperExecutables', Copy) {
    doLast {
        from "../gradlew", "../gradlew.bat"
        into "src/main/resources/common/gradle/exec"
    }
}

def skipUI = providers.systemProperty("skipUI").isPresent()
if (!skipUI) {
    def copyUIStatic = tasks.register('copyUIStatic', Copy) {
        dependsOn tasks.findByPath(":ui:compileJava")
    //    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from tasks.findByPath(":ui:buildWebapp").outputs
        into "${buildDir}/resources/main/static"
    }

    def copyUITemplates = tasks.register('copyUITemplates', Copy) {
        dependsOn tasks.findByPath(":ui:compileJava")
    //    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from tasks.findByPath(":ui:buildWebapp").outputs
        into "${buildDir}/resources/main/templates"
    }

    def enableDepends = gradle.startParameter.taskNames.any
            {task -> task.equalsIgnoreCase('build') || task.equalsIgnoreCase('bootRun') }

    if (enableDepends) {
        processResources.dependsOn([copyUITemplates, copyUIStatic])
        bootRun.dependsOn([copyUITemplates, copyUIStatic])
    }
}
rootProject.tasks["wrapper"].finalizedBy([copyWrapper, copyWrapperExecutables])
bootBuildInfo.mustRunAfter(compileJava)

build.dependsOn([copyWrapper, copyWrapperExecutables])
