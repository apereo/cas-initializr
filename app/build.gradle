buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.yaml:snakeyaml:1.30"
    }
}

plugins {
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "${gradleDependencyManagementPluginVersion}"
    id "io.freefair.lombok" version "${gradleFreeFairPluginVersion}"
    id "java-library"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
        mavenContent { snapshotsOnly() }
    }
}

dependencyManagement {
    imports {
        mavenBom "io.spring.initializr:initializr-bom:${springInitializrVersion}"
    }
}

springBoot {
    buildInfo()
    mainClass.set("org.apereo.cas.CasInitializrApplication")
}

dependencies {
    implementation "org.jooq:jool:0.9.14"
    implementation "org.eclipse.jgit:org.eclipse.jgit:6.1.0.202203080745-r"
    implementation "com.github.vladimir-bukhtoyarov:bucket4j-core:7.4.0"
    implementation "com.github.spullara.mustache.java:compiler:0.9.10"
    
    implementation "org.springframework.boot:spring-boot-starter-web"

    implementation "io.spring.initializr:initializr-web"
    implementation "io.spring.initializr:initializr-actuator"
    implementation "io.spring.initializr:initializr-generator-spring"
    implementation "io.spring.initializr:initializr-generator"
    implementation "io.spring.initializr:initializr-generator"

    implementation "org.apereo.cas:cas-server-core-configuration-metadata-repository:${casVersion}"
    implementation "org.apereo.cas:cas-server-core-api-configuration-model:${casVersion}"

    runtimeOnly "org.springframework.boot:spring-boot-starter-tomcat"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

bootBuildImage {
    imageName = "apereo/cas-initializr:${casVersion}"
}

bootJar {
    archiveName "app.jar"
    baseName "app"
}

bootRun {
    def list = []
    list.add("-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n")

    jvmArgs = list

    def appArgList = []
    args = appArgList
}

def getBranchName(String version) {
    def casBranch = version.split("\\.")
    return casBranch[0] + "." + casBranch[1]
}

processResources {
    filesMatching(['**/*.yml', '**/*.properties', '**/*.md', '**/*.mustache']) {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                "javaVersion"                            : project.sourceCompatibility,

                "casVersion"                             : project.property("casVersion"),
                "casLatestVersion"                       : project.property("casLatestVersion"),
                "casBranch"                              : getBranchName(project.property("casVersion").toString()),
                "version"                                : project.property("version"),
                "springBootVersion"                      : project.property("springBootVersion"),
                "springBootLatestVersion"                : project.property("springBootLatestVersion"),
                "gradleDependencyManagementPluginVersion": project.property("gradleDependencyManagementPluginVersion"),
                "gradleFreeFairPluginVersion"            : project.property("gradleFreeFairPluginVersion"),
                "gradleDownloadTaskPluginVersion"        : project.property("gradleDownloadTaskPluginVersion"),
                "tomcatVersion"                          : project.property("tomcatVersion"),
                "jibVersion"                             : project.property("jibVersion")
                
        ]
    }
}

def supportedTypes = ["cas", "cas-mgmt"]
supportedTypes.forEach({ type ->
    project.tasks.create(name: "versions-${type}",
                         description: "Display supported versions",
                         dependsOn: build) {
        doLast {
            def yaml = new org.yaml.snakeyaml.Yaml()
            def file = file("${buildDir}/resources/main/application.yml")
            def config = yaml.load(file.newInputStream())
            def supportedVersions = config.'cas-initializr'.'supported-versions'
            def results = supportedVersions.findAll { ver -> ver.type == type }
            println(groovy.json.JsonOutput.toJson(results))
        }
    }
})

task latestVersions(description: "Display supported versions", dependsOn: build) {
    doLast {
        def results = [version: project.property("casLatestVersion"),
                       'boot-version': project.property("springBootLatestVersion")]
        println(groovy.json.JsonOutput.toJson(results))
    }
}

task copyWrapper(type: Copy) {
    from "../gradle/wrapper"
    into "src/main/resources/common/gradle/wrapper"
}

task copyWrapperExecutables(type: Copy) {
    from "../gradlew", "../gradlew.bat"
    into "src/main/resources/common/gradle/exec"
}

rootProject.tasks["wrapper"].finalizedBy([copyWrapper, copyWrapperExecutables]) 
build.dependsOn([copyWrapper, copyWrapperExecutables])
